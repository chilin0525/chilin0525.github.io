<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Meow</title>
    <link>http://www.example.com/</link>
    <description>Recent content on Meow</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 24 Apr 2024 15:53:15 +0800</lastBuildDate><atom:link href="http://www.example.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cassandra</title>
      <link>http://www.example.com/posts/cassandra/</link>
      <pubDate>Wed, 24 Apr 2024 15:53:15 +0800</pubDate>
      
      <guid>http://www.example.com/posts/cassandra/</guid>
      <description>reference Link to heading https://tachunwu.github.io/posts/discord-cassandra/</description>
    </item>
    
    <item>
      <title>Dynamo: Amazon&#39;s Highly Available Key-value Store（SOSP 2007）</title>
      <link>http://www.example.com/posts/distributed-system/dynamo/</link>
      <pubDate>Wed, 24 Apr 2024 15:48:44 +0800</pubDate>
      
      <guid>http://www.example.com/posts/distributed-system/dynamo/</guid>
      <description>abstract Link to heading 提出 Amazon 遇到的最大挑戰是 reliability at massive scale，需要的是 highly available key-value storage，為 core service 提供 always-on 的體驗。為了達到這個目的，選擇犧牲了特殊 failure 下的 consistency，使用 object versioning 與 pplication-assisted conflict resolution 機制。 設計上的考量 Link to heading 如何解決 conflict 特性 Link to heading 非同步複製 犧牲 consistent 換 availbility 保證 eventually consistent always writable 把解決寫入 conflict 的情況在讀取時解決 Syetem Archhitecture Link to heading 提出生產級別的 storage system 要考慮底下任務制定相關解決方案: load balancing membership and failure detection failure recovery replica synchronization overload handling state transfer concurrency and job scheduling request marshalling request routing system monitoring and alarming configuration management Dynamo 論文中只討論了下面的幾項技術 parition: 如何決定資料要存到哪個節點 replication versioning membership failure detection and failure handling scaling system architecture Link to heading Dynamo 對外提供的 interface 有兩個操作: get(key) 根據 key 到所有 replica node 上搜尋，返回 single object；當發生版本衝突的情況，則是回傳 list of objects witi a context put(key) 根據 key 決定 object 要存在哪個 replica node context: version of the object opaque to the caller partition Link to heading 重點是如何分配資料到特定節點中</description>
    </item>
    
    <item>
      <title>Raft</title>
      <link>http://www.example.com/posts/raft/</link>
      <pubDate>Wed, 10 Apr 2024 12:54:23 +0800</pubDate>
      
      <guid>http://www.example.com/posts/raft/</guid>
      <description>[toc]
Raft Link to heading 近期要準備分散式系統期末報告，要選定三篇 production 的論文，但這些的前提是要先打倒一直聽過，但從來沒接觸過的大魔王 - Raft 演算法
Production use of Raft CockroachDB Etcd RabbitMQ TiDB ZooKeeper Kafka Terminalogy Link to heading 有許多名詞可能會讓人產生 ambiguous，底下列出此篇文章會提到的重點
log: Raft basic Link to heading station machine Link to heading Raft 將集群中的節點分為三種狀態的角色，每個節點只會處於下列三種狀態其中之一(光是這點，相比 Paxos 就容易了不少):
Leader: 正常情況集群只有一個 Leader Follower: 非選舉期間，Leader 以外的狀態 被動，不會主動發出 request，負責回應 Leader 與 Candidate 的 request 節點預設狀態，如果沒有察覺到 Leader 會切換到 candidate 狀態，根據一次或是多次的選舉後，最終可能變成 Leader 或是持續 Follower 狀態 Candidatae: 特殊狀態，選舉新的 Leader 才會使用到 並以 Station machine 來描述變化:</description>
    </item>
    
    <item>
      <title>ChangeFormer</title>
      <link>http://www.example.com/posts/changeformer/</link>
      <pubDate>Wed, 31 Jan 2024 23:35:33 +0800</pubDate>
      
      <guid>http://www.example.com/posts/changeformer/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://www.example.com/posts/2024/</link>
      <pubDate>Sun, 21 Jan 2024 16:29:07 +0800</pubDate>
      
      <guid>http://www.example.com/posts/2024/</guid>
      <description> 2024-01-18 半夜逛了 Twitter 讀了不少人對於 2023 的回顧與 2024 的規劃 https://mp.weixin.qq.com/s?__biz=MjM5NjI4MjM0Mw==&amp;mid=2652166294&amp;idx=1&amp;sn=475bf1b82f7f9943837b67bec399c5cd&amp;chksm=bd0bd21e8a7c5b084b576103690074bebfe1a96cfbdc5d7370ba727782cbbc8001bb2e84fe41&amp;token=241587091&amp;lang=zh_CN#rd https://twitter.com/fkysly/status/1746784846943601028 https://lutaonan.com/blog/say-in-28/ 希望自己花時間把獨立開發週刊閱讀一下 https://www.ezindie.com/weekly 2024-01-21 https://podcasters.spotify.com/pod/show/rusttalk/episodes/009-e2davbk 2024-01-31 可以考慮讀個 https://www.amazon.com/Philosophy-Software-Design-John-Ousterhout/dp/1732102201 https://go7hic.github.io/A-Philosophy-of-Software-Design/#/ https://epubkit.app/blog/paul-graham-2016-2023 2024-03-11 我後來把做音樂這件事情分成幾個層次，你喜歡音樂跟創造音樂是你跟音樂的關係，如果今天沒有觀眾你還會想要做音樂的話，那就是成為藝術家的過程，但是如果我們喜歡音樂是因為我們需要觀眾，我才做做音樂的話，那我就屬於一個專業人士或是一個在音樂產業界工作的人，後來我發現，我需要成為藝術家，這是我自己負的責任。如果有一天我沒辦法辦法表演，例如我的手沒辦法改善或是沒有人聽的話，我還會想要做音樂嗎？我會發現，我會想做音樂，我需要做音樂，我跟觀眾是我跟觀眾的關係，但我跟音樂的關係是我跟音樂的關係 大象體操＠這又沒有很ㄉ
2024-03-17 (日) 今天在公司標記資料，對於邊做這種高重複性的工作最好找個音樂 or podcast，據說這有助於提高生產力 一開始在 代碼之外 听众来信 #8 995 没有自己的时间，如何调整？ 聽到三位主持人推薦 前阿里CEO卫哲：趁年轻去印一张自己人生的股票｜S6E34 硅谷徐老师 </description>
    </item>
    
    <item>
      <title>Python Decorator</title>
      <link>http://www.example.com/posts/python_decorator/</link>
      <pubDate>Sun, 21 Jan 2024 14:05:37 +0800</pubDate>
      
      <guid>http://www.example.com/posts/python_decorator/</guid>
      <description>簡介 Link to heading 根據 PEP3181，Python 中的 Decorator 與 GOF 中的 Decorator 不同 起源 Link to heading 過去常使用到 python 中的 @，但似乎沒深入了解過 how it works 常在 pytest 傳入多筆 testcase，底下範例取自 Parametrizing fixtures and test functions: import pytest @pytest.mark.parametrize( &amp;#34;test_input,expected&amp;#34;, [(&amp;#34;3+5&amp;#34;, 8), (&amp;#34;2+4&amp;#34;, 6), (&amp;#34;6*9&amp;#34;, 42)] ) def test_eval(test_input, expected): assert eval(test_input) == expected 近期在應付學校課業時發現後端認證 token 時有更佳寫法，取自 Day08:08 - User服務(3) - 後端 - JWT token、修改個人資料: import jwt from users.models import User from tools.</description>
    </item>
    
    <item>
      <title>Hello world, Again!</title>
      <link>http://www.example.com/posts/first/</link>
      <pubDate>Sun, 09 Apr 2023 14:55:35 +0800</pubDate>
      
      <guid>http://www.example.com/posts/first/</guid>
      <description> Hello world, Again! Link to heading 第三次回歸 blog， 先記錄一下 Hugo 一些語法。
New post Link to heading $ hugo new posts/first.md Deploy Link to heading generate static page
$ hugo -D </description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://www.example.com/about/</link>
      <pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.example.com/about/</guid>
      <description>喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵 喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵 喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵 喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵 喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵</description>
    </item>
    
    <item>
      <title></title>
      <link>http://www.example.com/posts/k8s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.example.com/posts/k8s/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>http://www.example.com/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.example.com/contact/</guid>
      <description> Email: chilin.chiou@gmail.com Github: Gitb profile </description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>http://www.example.com/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.example.com/projects/</guid>
      <description>Nothing here</description>
    </item>
    
  </channel>
</rss>
