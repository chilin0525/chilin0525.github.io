<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Meow</title>
    <link>http://www.example.com/</link>
    <description>Recent content on Meow</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 24 Apr 2024 15:48:44 +0800</lastBuildDate><atom:link href="http://www.example.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dynamo: Amazon&#39;s Highly Available Key-value Store（SOSP 2007）</title>
      <link>http://www.example.com/posts/distributed-system/dynamo/</link>
      <pubDate>Wed, 24 Apr 2024 15:48:44 +0800</pubDate>
      
      <guid>http://www.example.com/posts/distributed-system/dynamo/</guid>
      <description>abstract Link to heading 提出 Amazon 遇到的最大挑戰是 reliability at massive scale，需要的是 highly available key-value storage，為 core service 提供 always-on 的體驗。為了達到這個目的，選擇犧牲了特殊 failure 下的 consistency，使用 object versioning 與 pplication-assisted conflict resolution 機制。 設計上的考量 Link to heading 如何解決 conflict 特性 Link to heading 非同步複製 犧牲 consistent 換 availbility 保證 eventually consistent always writable 把解決寫入 conflict 的情況在讀取時解決 Syetem Archhitecture Link to heading 提出生產級別的 storage system 要考慮底下任務制定相關解決方案: load balancing membership and failure detection failure recovery replica synchronization overload handling state transfer concurrency and job scheduling request marshalling request routing system monitoring and alarming configuration management Dynamo 論文中只討論了下面的幾項技術 parition: 如何決定資料要存到哪個節點 replication versioning membership failure detection and failure handling scaling system architecture Link to heading Dynamo 對外提供的 interface 有兩個操作: get(key) 根據 key 到所有 replica node 上搜尋，返回 single object；當發生版本衝突的情況，則是回傳 list of objects witi a context put(key) 根據 key 決定 object 要存在哪個 replica node context: version of the object opaque to the caller partition Link to heading 重點是如何分配資料到特定節點中</description>
    </item>
    
    <item>
      <title>Raft</title>
      <link>http://www.example.com/posts/raft/</link>
      <pubDate>Wed, 10 Apr 2024 12:54:23 +0800</pubDate>
      
      <guid>http://www.example.com/posts/raft/</guid>
      <description>[toc]
Raft Link to heading 近期要準備分散式系統期末報告，要選定三篇 production 的論文，但這些的前提是要先打倒一直聽過，但從來沒接觸過的大魔王 - Raft 演算法
Production use of Raft CockroachDB Etcd RabbitMQ TiDB ZooKeeper Kafka Terminalogy Link to heading 有許多名詞可能會讓人產生 ambiguous，底下列出此篇文章會提到的重點
log: Raft basic Link to heading station machine Link to heading Raft 將集群中的節點分為三種狀態的角色，每個節點只會處於下列三種狀態其中之一(光是這點，相比 Paxos 就容易了不少):
Leader: 正常情況集群只有一個 Leader Follower: 非選舉期間，Leader 以外的狀態 被動，不會主動發出 request，負責回應 Leader 與 Candidate 的 request 節點預設狀態，如果沒有察覺到 Leader 會切換到 candidate 狀態，根據一次或是多次的選舉後，最終可能變成 Leader 或是持續 Follower 狀態 Candidatae: 特殊狀態，選舉新的 Leader 才會使用到 並以 Station machine 來描述變化:</description>
    </item>
    
    <item>
      <title>Hello world, Again!</title>
      <link>http://www.example.com/posts/first/</link>
      <pubDate>Sun, 09 Apr 2023 14:55:35 +0800</pubDate>
      
      <guid>http://www.example.com/posts/first/</guid>
      <description> Hello world, Again! Link to heading 第三次回歸 blog， 先記錄一下 Hugo 一些語法。
New post Link to heading $ hugo new posts/first.md Deploy Link to heading generate static page
$ hugo -D </description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://www.example.com/about/</link>
      <pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.example.com/about/</guid>
      <description>喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵 喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵 喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵 喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵 喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵喵</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>http://www.example.com/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.example.com/contact/</guid>
      <description> Email: chilin.chiou@gmail.com Github: Gitb profile </description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>http://www.example.com/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.example.com/projects/</guid>
      <description>Nothing here</description>
    </item>
    
  </channel>
</rss>
